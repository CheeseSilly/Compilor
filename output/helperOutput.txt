const
CONST -> const
m
IDENTIFIER -> m
=
EQUAL -> =
7
INTEGER_VAL -> 7
CDefine -> IDENTIFIER = INTEGER_VAL
ConstDef -> CDefine
,
COMMA -> ,
n
IDENTIFIER -> n
=
EQUAL -> =
3
INTEGER_VAL -> 3
CDefine -> IDENTIFIER = INTEGER_VAL
ConstDef -> ConstDef , CDefine
;
SEMI -> ;
ConstDec -> const ConstDef SEMI
var
VAR -> var
arr
IDENTIFIER -> arr
(
SL_PAREN -> (
1
INTEGER_VAL -> 1
ArrayIndex -> INTEGER_VAL
:
COLON -> :
4
INTEGER_VAL -> 4
ArrayIndex -> INTEGER_VAL
)
SR_PAREN -> )
Array -> SL_PAREN ArrayIndex COLON ArrayIndex SR_PAREN
IdentiObject -> IDENTIFIER Array
IdentiDef -> IdentiObject
;
SEMI -> ;
VarObj -> var IdentiDef SEMI
VarDec -> VarObj
var
VAR -> var
x
IDENTIFIER -> x
,
COMMA -> ,
IdentiObject -> IDENTIFIER
IdentiDef -> IdentiObject
y
IDENTIFIER -> y
,
COMMA -> ,
IdentiObject -> IDENTIFIER
IdentiDef -> IdentiDef , IdentiObject
z
IDENTIFIER -> z
,
COMMA -> ,
IdentiObject -> IDENTIFIER
IdentiDef -> IdentiDef , IdentiObject
q
IDENTIFIER -> q
,
COMMA -> ,
IdentiObject -> IDENTIFIER
IdentiDef -> IdentiDef , IdentiObject
r
IDENTIFIER -> r
;
SEMI -> ;
IdentiObject -> IDENTIFIER
IdentiDef -> IdentiDef , IdentiObject
VarObj -> var IdentiDef SEMI
VarDec -> VarDec VarObj
procedure
PROCEDURE -> procedure
multiply
IDENTIFIER -> multiply
;
SEMI -> ;
ProceHead -> procedure IDENTIFIER SEMI
var
VAR -> var
a
IDENTIFIER -> a
,
COMMA -> ,
IdentiObject -> IDENTIFIER
IdentiDef -> IdentiObject
b
IDENTIFIER -> b
;
SEMI -> ;
IdentiObject -> IDENTIFIER
IdentiDef -> IdentiDef , IdentiObject
VarObj -> var IdentiDef SEMI
VarDec -> VarObj
begin
_BEGIN_ -> begin
DeclarePart -> VarDec
a
IDENTIFIER -> a
:=
ASSIGN -> :=
Identifier -> IDENTIFIER
x
IDENTIFIER -> x
;
SEMI -> ;
Identifier -> IDENTIFIER
Factor -> Identifier
Term -> Factor
Expr -> Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
ComStates -> Statement SEMI
b
IDENTIFIER -> b
:=
ASSIGN -> :=
Identifier -> IDENTIFIER
y
IDENTIFIER -> y
;
SEMI -> ;
Identifier -> IDENTIFIER
Factor -> Identifier
Term -> Factor
Expr -> Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
ComStates ->ComStates  Statement SEMI
z
IDENTIFIER -> z
:=
ASSIGN -> :=
Identifier -> IDENTIFIER
0
INTEGER_VAL -> 0
Factor -> INTEGER_VAL
Term -> Factor
;
SEMI -> ;
Expr -> Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
ComStates ->ComStates  Statement SEMI
while
WHILE -> while
b
IDENTIFIER -> b
>
GREATER -> >
Identifier -> IDENTIFIER
Factor -> Identifier
Term -> Factor
Expr -> Term
CMP -> GREATER
0
INTEGER_VAL -> 0
Factor -> INTEGER_VAL
Term -> Factor
do
DO -> do
Expr -> Term
Condition -> Expr CMP Expr
begin
_BEGIN_ -> begin
if
IF -> if
ODD
ODD -> ODD
b
IDENTIFIER -> b
then
THEN -> then
Identifier -> IDENTIFIER
Factor -> Identifier
Term -> Factor
Expr -> Term
Condition -> ODD Expr
z
IDENTIFIER -> z
:=
ASSIGN -> :=
Identifier -> IDENTIFIER
z
IDENTIFIER -> z
+
PLUS -> +
Identifier -> IDENTIFIER
Factor -> Identifier
Term -> Factor
Expr -> Term
a
IDENTIFIER -> a
;
SEMI -> ;
Identifier -> IDENTIFIER
Factor -> Identifier
Term -> Factor
Expr -> Expr PLUS Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
CondiStm -> IF Condition THEN Statement
Statements -> CondiStm
ComStates -> Statement SEMI
a
IDENTIFIER -> a
:=
ASSIGN -> :=
Identifier -> IDENTIFIER
2
INTEGER_VAL -> 2
Factor -> INTEGER_VAL
Term -> Factor
*
TIMES -> *
a
IDENTIFIER -> a
;
SEMI -> ;
Identifier -> IDENTIFIER
Factor -> Identifier
Term -> Term TIMES Factor
Expr -> Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
ComStates ->ComStates  Statement SEMI
b
IDENTIFIER -> b
:=
ASSIGN -> :=
Identifier -> IDENTIFIER
b
IDENTIFIER -> b
/
DIVIDE -> /
Identifier -> IDENTIFIER
Factor -> Identifier
Term -> Factor
2
INTEGER_VAL -> 2
Factor -> INTEGER_VAL
Term -> Term DIVIDE Factor
;
SEMI -> ;
Expr -> Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
ComStates ->ComStates  Statement SEMI
end
END -> end
ComplexStm -> _BEGIN_ ComStates END
Statements -> ComplexStm
WhileStm -> WHILE Condition DO Statement
Statements -> WhileStm 
;
SEMI -> ;
ComStates ->ComStates  Statement SEMI
return
RETURN-> return
z
IDENTIFIER -> z
ReturnS -> return IDENTIFIER
Statements -> ReturnS 
;
SEMI -> ;
ComStates ->ComStates  Statement SEMI
end
END -> end
ComplexStm -> _BEGIN_ ComStates END
Statements -> ComplexStm
SubPro -> DeclarePart Statement
;
SEMI -> ;
ProDec -> ProceHead SubPro SEMI
procedure
PROCEDURE -> procedure
main
IDENTIFIER -> main
;
SEMI -> ;
ProceHead -> procedure IDENTIFIER SEMI
begin
_BEGIN_ -> begin
x
IDENTIFIER -> x
:=
ASSIGN -> :=
Identifier -> IDENTIFIER
3
INTEGER_VAL -> 3
Factor -> INTEGER_VAL
Term -> Factor
;
SEMI -> ;
Expr -> Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
ComStates -> Statement SEMI
y
IDENTIFIER -> y
:=
ASSIGN -> :=
Identifier -> IDENTIFIER
7
INTEGER_VAL -> 7
Factor -> INTEGER_VAL
Term -> Factor
;
SEMI -> ;
Expr -> Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
ComStates ->ComStates  Statement SEMI
z
IDENTIFIER -> z
:=
ASSIGN -> :=
Identifier -> IDENTIFIER
0
INTEGER_VAL -> 0
Factor -> INTEGER_VAL
Term -> Factor
;
SEMI -> ;
Expr -> Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
ComStates ->ComStates  Statement SEMI
x
IDENTIFIER -> x
:=
ASSIGN -> :=
Identifier -> IDENTIFIER
2
INTEGER_VAL -> 2
Factor -> INTEGER_VAL
Term -> Factor
;
SEMI -> ;
Expr -> Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
ComStates ->ComStates  Statement SEMI
call
CALL -> call
multiply
IDENTIFIER -> multiply
(
SL_PAREN -> (
z
IDENTIFIER -> z
)
SR_PAREN -> )
Identifier -> IDENTIFIER
Factor -> Identifier
Term -> Factor
Expr -> Term
CconObj -> Expr
Ccontent -> CconObj
CallS -> call SL_PAREN Ccontent SR_PAREN
Statements -> CallS 
;
SEMI -> ;
ComStates ->ComStates  Statement SEMI
write
WRITE -> write
(
SL_PAREN -> (
z
IDENTIFIER -> z
)
SR_PAREN -> )
Identifier -> IDENTIFIER
Factor -> Identifier
Term -> Factor
Expr -> Term
WconObj -> Expr
Wcontent -> WconObj
WriteS -> write SL_PAREN Wcontent SR_PAREN
Statements -> WriteS 
;
SEMI -> ;
ComStates ->ComStates  Statement SEMI
arr
IDENTIFIER -> arr
(
SL_PAREN -> (
0
INTEGER_VAL -> 0
Factor -> INTEGER_VAL
Term -> Factor
)
SR_PAREN -> )
Expr -> Term
INdex_Index -> Expr
Identifier -> IDENTIFIER SL_PAREN INdex_Index SR_PAREN
:=
ASSIGN -> :=
2
INTEGER_VAL -> 2
Factor -> INTEGER_VAL
Term -> Factor
;
SEMI -> ;
Expr -> Term
AssignStm -> Identifier ASSIGN Expr
Statements -> AssignStm 
ComStates ->ComStates  Statement SEMI
write
WRITE -> write
(
SL_PAREN -> (
arr
IDENTIFIER -> arr
(
SL_PAREN -> (
0
INTEGER_VAL -> 0
Factor -> INTEGER_VAL
Term -> Factor
)
SR_PAREN -> )
Expr -> Term
INdex_Index -> Expr
Identifier -> IDENTIFIER SL_PAREN INdex_Index SR_PAREN
Factor -> Identifier
Term -> Factor
)
SR_PAREN -> )
Expr -> Term
WconObj -> Expr
Wcontent -> WconObj
WriteS -> write SL_PAREN Wcontent SR_PAREN
Statements -> WriteS 
;
SEMI -> ;
ComStates ->ComStates  Statement SEMI
end
END -> end
ComplexStm -> _BEGIN_ ComStates END
Statements -> ComplexStm
SubPro -> Statement
;
SEMI -> ;
ProDec -> ProDec ProceHead SubPro SEMI
begin
_BEGIN_ -> begin
DeclarePart -> ConstDec VarDec ProDec
return
RETURN-> return
0
INTEGER_VAL -> 0
ReturnS -> return INTEGER_VAL
Statements -> ReturnS 
;
SEMI -> ;
ComStates -> Statement SEMI
end
END -> end
ComplexStm -> _BEGIN_ ComStates END
Statements -> ComplexStm
SubPro -> DeclarePart Statement
.
DOT -> .
Program -> SubPro DOT
